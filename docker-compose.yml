version: "3.8"

# This docker-compose file is used to configure services for the Starter project.
# The services configured here include that of an API server, a UI frontend, and MongoDB.
# The API service uses a Dockerfile located in the docker-assets/api-v1/ folder to create the image.
# It's command line arguments include a workdir to the API work directory, a Node version to use, and a
# Nestjs version to use. Build variables are also set in the environment section providing access to AWS services,
# ports and MongoDB credentials.
# The front service uses a Dockerfile located in the docker-assets/ui-v1/ folder to create the image. It's command
# line arguments include a workdir to the UI work directory, a Node version to use, and an Angular version to use.
# Build variables are also set in the environment section providing access to ports and Node environment.
# The mongo service uses a .env file located in the docker-assets/mongo/ folder to configure environment variables.
# It's command line argument include a Mongo version to use and a timezone to use.
# Volumes and networks are also configured allowing for persistent data storage and connectivity between containers.

services:
  # API Service
  api:
    image: starter/api:dev
    container_name: starter-api-dev
    hostname: starter-api
    command: /bin/bash /init.sh
    build:
      context: docker-assets/api/
      args:
        workdir: ${API_WORKDIR}
        node_version: ${USE_NODE_VERSION:-16.20.0}
        node_env: ${NODE_ENV:-development}
        nestjs_version: ${NESTJS_CLI_VERSION:-latest}
        mongo_version: ${MONGO_VERSION:-6.0}
        debug: ${DEBUG:-yes}
        passport_auth_strategy: ${PASSPORT_AUTH_STRATEGY:-local}
        mongo_user: ${MONGO_USER_NAME:-starter}
        mongo_pass: ${MONGO_USER_PASS}
        tz: ${TZ:-Etc/UTC}
    environment:
      NODE_VERSION: ${USE_NODE_VERSION}
      API_PORT: ${API_PORT_CONT:-3000}
      MONGO_PORT: ${MONGO_PORT_CONT:-27017}
      MONGO_HOST: ${MONGO_HOST:-mongo}-${KEY_LEN:-4096}
      MONGO_URL_PARAMS: ${MONGO_URL_PARAMS:??authMechanism=DEFAULT}
      MONGO_SECURE: ${MONGO_TLS:-no}
      SERVERLESS: ${API_SERVERLESS:-no}
    tty: true
    volumes:
      - ./apps/api:${API_WORKDIR}
    ports:
      - "${API_PORT_HOST:-3000}:${API_PORT_CONT:-3000}"
      # NodeJS debugger port
      - "9229:9229"
    depends_on:
      - mongo
      - redis
      - mysql
    networks:
      - starternet

  # MongoDB Service
  mongo:
    image: starter/mongo:${MONGO_VERSION:-6.0}
    container_name: starter-mongo
    hostname: ${MONGO_HOST:-mongo}-${KEY_LEN:-4096}
    command: mongod --config /etc/mongod.conf --port ${MONGO_PORT_CONT:-27017} --bind_ip ${MONGO_IP:-0.0.0.0}
    build:
      context: ./docker-assets/certs/
      args:
        mongo_version: ${MONGO_VERSION:-6.0}
        debug: ${DEBUG:-yes}
        port: ${MONGO_PORT_CONT:-27017}
        user: ${MONGO_USER_NAME}
        pass: ${MONGO_USER_PASS}
        db: ${MONGO_DB}
        collections: ${MONGO_COLLECTIONS}
        root_user: ${MONGO_ROOT_USER}
        root_pass: ${MONGO_ROOT_PASS}
        telemetry: ${MONGO_TELEMETRY:-yes}
        tz: ${TZ:-Etc/UTC}
        admin_db: ${MONGO_ADMIN_DB}
    environment:
      SECURE: ${MONGO_SECURE:-no}
      MAX_MAP_COUNT: ${MONGO_VM_MAX_MAP_COUNT:-102400}
    ulimits:
      nproc: 65535
      nofile:
        soft: 64000
        hard: 128000
    volumes:
      - data_db_mongodb:/data/db/
      - var_log_mongodb:/var/log/mongodb/
      - mongodb_ssl:/data/ssl/:ro
      - ./docker-assets/mongo/mongod.conf.yml:/etc/mongod.conf:ro
    ports:
      - "${MONGO_PORT_HOST:-27017}:${MONGO_PORT_CONT:-27017}"
    networks:
      - starternet
    restart: no
    depends_on:
      - ca
    user: mongodb:mongodb

  # MySQL Database Service
  mysql:
    hostname: starter-mysql
    container_name: starter-mysql
    image: starter/mysql:${MYSQL_VERSION}
    build:
      context: ./docker-assets/mysql/
      args:
        tz: ${TZ:-Etc/UTC}
        mysql_version: ${MYSQL_VERSION}
    environment:
      MYSQL_ROOT_USER: ${MYSQL_USER}
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASS}
    volumes:
      - ./docker-assets/mysql/my.cnf:/etc/alternatives/my.cnf
      - ./docker-assets/mysql/log/:/var/log/mysql
      - var_lib_mysql:/var/lib/mysql
    ports:
      - "${MYSQL_PORT_HOST:-3306}:${MYSQL_PORT_CONTAINER:-3306}"
    restart: no
    networks:
      - starternet

  # Redis Caching Service
  redis:
    image: starter/redis:${REDIS_VERSION}
    hostname: starter-redis
    container_name: starter-redis
    build:
      context: ./docker-assets/redis/
      args:
        tz: ${TZ:-Etc/UTC}
    sysctls:
      net.core.somaxconn: 1024
    command: /bin/bash /init.sh
    ports:
      - "${REDIS_PORT_HOST:-6379}:${REDIS_PORT_CONTAINER:-6379}"
    volumes:
      - redis_data_bases:/data/bases
      - ./docker-assets/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - starternet
    restart: no

  # UI Frontend Service
  ui:
    image: starter/ui:dev
    container_name: starter-ui-dev
    command: /bin/bash /init.sh
    build:
      context: ./docker-assets/ui/
      args:
        workdir: ${UI_WORKDIR}
        tz: ${TZ:-Etc/UTC}
        angular_version: ${ANGULAR_CLI_VERSION:-latest}
        node_version: ${USE_NODE_VERSION:-16.20.0}
        debug: ${DEBUG:-yes}
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      SERVERLESS: ${UI_SERVERLESS:-no}
    tty: true
    volumes:
      - ./apps/ui:${UI_WORKDIR}
    ports:
      - "4000:4000"
      - "4200:4200"
      - "4300:4300"
      - "9222:9222"
    depends_on:
      - api
    networks:
      - starternet

  ca:
    image: starter/openssl
    container_name: starter-ca
    build:
      context: ./docker-assets/certs/
      args:
        debug: ${DEBUG:-yes}
        key_len: ${KEY_LEN:-4096}
        days: ${CERT_DAYS:-1461}
        ca_cn: ${CA_ORG_CN:-Starter RootCA Org}
        server_cn: ${MONGO_HOST:-mongo}-${KEY_LEN:-4096}
        subj: /C=${CERT_COUNTRY:-UA}/ST=${CERT_STATE:-Odesa}/L=${CERT_LOC:-Odesa}/O=${CERT_ORG:-Starter Org Pty}/OU=${CERT_ORG_UNIT:-.}
    volumes:
      - mongodb_ssl:/etc/ssl/mongodb/

# Specify volumes
volumes:
  data_db_mongodb:
  var_log_mongodb:
  redis_data_bases:
  var_lib_mysql:
  mongodb_ssl:

# Specify networks
networks:
  starternet:
    ipam:
      driver: default
      config:
        - subnet: 172.16.50.0/24
