version: "3.8"

# This docker-compose file is used to configure services for the Starter project.
# The services configured here include that of an API server, a UI frontend, and MongoDB.
# The API service uses a Dockerfile located in the docker-assets/api-v1/ folder to create the image.
# It's command line arguments include a workdir to the API work directory, a Node version to use, and a
# Nestjs version to use. Build variables are also set in the environment section providing access to AWS services,
# ports and MongoDB credentials.
# The front service uses a Dockerfile located in the docker-assets/ui-v1/ folder to create the image. It's command
# line arguments include a workdir to the UI work directory, a Node version to use, and an Angular version to use.
# Build variables are also set in the environment section providing access to ports and Node environment.
# The mongo service uses a .env file located in the docker-assets/mongo/ folder to configure environment variables.
# It's command line argument include a Mongo version to use and a timezone to use.
# Volumes and networks are also configured allowing for persistent data storage and connectivity between containers.

services:
  # API Service
  api:
    image: starter/api:dev
    container_name: starter-api-dev
    hostname: localhost
    command: /bin/bash /init.sh
    build:
      context: docker-assets/api/
      args:
        workdir: ${API_WORKDIR:?Environment variable API_WORKDIR not specified}
        tz: ${TZ:-Etc/UTC}
        node_version: ${USE_NODE_VERSION:-16.20.0}
        node_env: ${NODE_ENV:-development}
        nestjs_version: ${NESTJS_CLI_VERSION:-latest}
        debug: ${DEBUG:-yes}
        # passport_auth_strategy: ${PASSPORT_AUTH_STRATEGY:-local}
        mongo_user: ${MONGO_USER_NAME:-starter}
        mongo_pass: ${MONGO_USER_PASS:?Environment variable MONGO_USER_PASS not specified}
    environment:
      NODE_VERSION: ${USE_NODE_VERSION:?Environment variable USE_NODE_VERSION not specified}
      API_PORT: ${API_PORT_CONT:-3000}
      MONGO_PORT: ${MONGO_PORT_CONT:-27017}
      MONGO_HOST: ${MONGO_HOST:-mongo}-${KEY_LEN:-4096}
      MONGO_URL_PARAMS: ${MONGO_URL_PARAMS:??authMechanism=DEFAULT}
      MONGO_SECURE: ${MONGO_TLS:-no}
    tty: true
    volumes:
      - ./apps/api:${API_WORKDIR:?Environment variable API_WORKDIR not specified}
      - ./docker-assets/ssl/:/home/node/.ssl
    ports:
      - "${API_PORT_HOST:-3000}:${API_PORT_CONT:-3000}"
      - "9229:9229" # NodeJS debugger port
    depends_on:
      - mongo
      - mysql
      - redis
    networks:
      - starternet
    user: node:node
    links:
      - mongo
      - mysql
      - redis

  # MongoDB Service
  mongo:
    image: starter/mongo:${MONGO_VERSION:?Environment variable MONGO_VERSION not specified}
    container_name: starter-mongo
    hostname: ${MONGO_HOST:-mongo}-${KEY_LEN:-4096}
    command: /init.sh
    build:
      context: ./docker-assets/mongo/
      shm_size: 500m
      args:
        mongo_version: ${MONGO_VERSION:?Environment variable MONGO_VERSION not specified}
        tz: ${TZ:-Etc/UTC}
        debug: ${DEBUG:-yes}
        port: ${MONGO_PORT_CONT:-27017}
        logpath: ${MONGO_LOGFILE}
        telemetry: ${MONGO_TELEMETRY:-yes}
        mongo_user: ${MONGO_USER_NAME:?Environment variable MONGO_USER_NAME not specified}
        mongo_pass: ${MONGO_USER_PASS:?Environment variable MONGO_USER_PASS not specified}
        db: ${MONGO_DB:-starter}
        mongo_collections: ${MONGO_COLLECTIONS:-starter1,starter2}
        mongo_root_user: ${MONGO_ROOT_USER:?Environment variable MONGO_ROOT_USER not specified}
        mongo_root_pass: ${MONGO_ROOT_PASS:?Environment variable MONGO_ROOT_PASS not specified}
    environment:
      SECURE: ${MONGO_SECURE:-no}
      SERVER_CN: ${MONGO_HOST:-mongo}-${KEY_LEN:-4096}
      MONGO_VERSION: ${MONGO_VERSION:?Environment variable MONGO_VERSION not specified}
      MAX_MAP_COUNT: ${MONGO_VM_MAX_MAP_COUNT:-102400}
      CACHE_SIZE: ${MONGO_CACHE_SIZE_GB:-1}
      TZ: ${TZ:-Etc/UTC}
      DEBUG: ${DEBUG:-yes}
      COLLECTIONS: ${MONGO_COLLECTIONS:-starter1,starter2}
      IP: ${MONGO_IP:-0.0.0.0}
      PORT: ${MONGO_PORT_CONT:-27017}
    ulimits:
      nproc: 65535
      nofile:
        soft: 64000
        hard: 128000
    volumes:
      - data_db_mongodb:/data/db
      - var_lib_mongodb:/var/lib/mongodb
      - var_log_mongodb:/var/log/mongodb/
    ports:
      - "${MONGO_PORT_HOST:-27017}:${MONGO_PORT_CONT:-27017}"
    networks:
      - starternet
    restart: on-failure

  # Redis Caching Service
  redis:
    image: starter/redis:${REDIS_VERSION}
    hostname: starter-redis
    container_name: redis
    build:
      context: ./docker-assets/redis/
      args:
        tz: ${TZ:-Etc/UTC}
    sysctls:
      net.core.somaxconn: 1024
    command: /bin/bash /init.sh
    ports:
      - "${REDIS_PORT_HOST:-6379}:${REDIS_PORT_CONTAINER:-6379}"
    volumes:
      - redis_data_bases:/data/bases
      - ./docker-assets/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - starternet
    restart: on-failure

  # MySQL Database Service
  mysql:
    hostname: starter-mysql
    container_name: mysql
    image: starter/mysql:${MYSQL_VERSION}
    build:
      context: ./docker-assets/mysql/
      args:
        mysql_version: ${MYSQL_VERSION:?Specify MYSQL_VERSION environment variable}
    environment:
      MYSQL_ROOT_USER: ${MYSQL_PASS:?Specify MYSQL_USER environment variable}
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASS:?Specify MYSQL_PASS environment variable}
    volumes:
      - ./docker-assets/mysql/my.cnf:/etc/alternatives/my.cnf
      - ./docker-assets/mysql/log/:/var/log/mysql
      - var_lib_mysql:/var/lib/mysql
    ports:
      - "${MYSQL_PORT_HOST:-3306}:${MYSQL_PORT_CONTAINER:-3306}"
    restart: on-failure
    networks:
      - starternet

  # UI Frontend Service
  ui:
    image: starter/ui:dev
    container_name: ui
    command: /bin/bash /init.sh
    hostname: starter-ui
    build:
      context: ./docker-assets/ui/
      args:
        workdir: ${UI_WORKDIR:?Build variable UI_WORKDIR not specified}
        tz: ${TZ:-Etc/UTC}
        angular_version: ${ANGULAR_CLI_VERSION:-latest}
        node_version: ${USE_NODE_VERSION:-16.20.0}
        debug: ${DEBUG:-yes}
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      SERVERLESS: ${SERVERLESS:-no}
    tty: true
    volumes:
      - ./apps/ui:${UI_WORKDIR:?Build variable UI_WORKDIR not specified}
    ports:
      - "4000:4000"
      - "4200:4200"
      - "4300:4300"
      - "9222:9222"
    depends_on:
      - api
    networks:
      - starternet
    user: node:node

# Specify volumes
volumes:
  data_db_mongodb:
  var_lib_mongodb:
  var_log_mongodb:
  redis_data_bases:
  var_lib_mysql:

# Specify networks
networks:
  starternet:
    ipam:
      driver: default
      config:
        - subnet: 172.16.50.0/24
